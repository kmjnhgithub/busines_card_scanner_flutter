// lib/data/datasources/local/app_database.dart

import 'package:drift/drift.dart';
import 'package:drift/native.dart';
import 'package:path_provider/path_provider.dart';
import 'package:path/path.dart' as p;
import 'dart:io';

import '../../models/business_card_model.dart';

part 'app_database.g.dart';

/// OCR Results 資料表
@DataClassName('OCRResultData')
class OCRResults extends Table {
  /// 主鍵 ID
  TextColumn get id => text().withLength(min: 1, max: 255)();
  
  /// 識別的原始文字
  TextColumn get rawText => text()();
  
  /// 偵測到的文字列表 (JSON 格式)
  TextColumn get detectedTexts => text().nullable()();
  
  /// 信心度 (0.0-1.0)
  RealColumn get confidence => real()();
  
  /// 圖片資料 (BLOB)
  BlobColumn get imageData => blob().nullable()();
  
  /// 圖片寬度
  IntColumn get imageWidth => integer().nullable()();
  
  /// 圖片高度
  IntColumn get imageHeight => integer().nullable()();
  
  /// 處理時間（毫秒）
  IntColumn get processingTimeMs => integer().nullable()();
  
  /// OCR 引擎名稱
  TextColumn get ocrEngine => text().withLength(max: 100).nullable()();
  
  /// 快取鍵值
  TextColumn get cacheKey => text().withLength(max: 255)();
  
  /// 處理時間
  DateTimeColumn get processedAt => dateTime()();
  
  /// 建立時間
  DateTimeColumn get createdAt => dateTime()();
  
  /// 是否為有效快取
  BoolColumn get isValidCache => boolean().withDefault(const Constant(true))();
  
  @override
  Set<Column> get primaryKey => {id};
  
  @override
  List<Set<Column>> get uniqueKeys => [
    {cacheKey}, // 快取鍵值唯一
  ];
}

/// OCR Statistics 資料表
@DataClassName('OCRStatisticData')
class OCRStatistics extends Table {
  /// 主鍵 ID
  TextColumn get id => text().withLength(min: 1, max: 255)();
  
  /// 總處理次數
  IntColumn get totalProcessed => integer().withDefault(const Constant(0))();
  
  /// 平均信心度
  RealColumn get averageConfidence => real().withDefault(const Constant(0.0))();
  
  /// 平均處理時間（毫秒）
  RealColumn get averageProcessingTimeMs => real().withDefault(const Constant(0.0))();
  
  /// 引擎使用統計 (JSON 格式)
  TextColumn get engineUsage => text().withDefault(const Constant('{}'))();
  
  /// 語言信心度統計 (JSON 格式)
  TextColumn get languageConfidence => text().withDefault(const Constant('{}'))();
  
  /// 最後更新時間
  DateTimeColumn get lastUpdated => dateTime()();
  
  @override
  Set<Column> get primaryKey => {id};
}

/// Business Cards 資料表
@DataClassName('BusinessCardData')
class BusinessCards extends Table {
  /// 主鍵 ID
  TextColumn get id => text().withLength(min: 1, max: 255)();
  
  /// 姓名（必填）
  TextColumn get name => text().withLength(min: 1, max: 100)();
  
  /// 姓名拼音
  TextColumn get namePhonetic => text().withLength(max: 200).nullable()();
  
  /// 職稱
  TextColumn get jobTitle => text().withLength(max: 100).nullable()();
  
  /// 公司名稱
  TextColumn get company => text().withLength(max: 200).nullable()();
  
  /// 部門
  TextColumn get department => text().withLength(max: 100).nullable()();
  
  /// Email
  TextColumn get email => text().withLength(max: 255).nullable()();
  
  /// 電話
  TextColumn get phone => text().withLength(max: 50).nullable()();
  
  /// 手機
  TextColumn get mobile => text().withLength(max: 50).nullable()();
  
  /// 地址
  TextColumn get address => text().withLength(max: 500).nullable()();
  
  /// 網站
  TextColumn get website => text().withLength(max: 255).nullable()();
  
  /// 備註
  TextColumn get notes => text().nullable()();
  
  /// 照片路徑
  TextColumn get photoPath => text().withLength(max: 500).nullable()();
  
  /// 建立時間
  DateTimeColumn get createdAt => dateTime()();
  
  /// 更新時間
  DateTimeColumn get updatedAt => dateTime()();
  
  @override
  Set<Column> get primaryKey => {id};
  
  @override
  List<Set<Column>> get uniqueKeys => [
    // 可以定義唯一約束，例如：{id} 已經在 primaryKey 中定義
  ];
}

/// OCR Data Access Object
@DriftAccessor(tables: [OCRResults, OCRStatistics])
class OCRDao extends DatabaseAccessor<AppDatabase> with _$OCRDaoMixin {
  OCRDao(AppDatabase db) : super(db);

  /// 插入新的 OCR 結果
  Future<void> insertOCRResult(OCRResultData result) {
    return into(ocrResults).insert(result);
  }

  /// 根據快取鍵值取得 OCR 結果
  Future<OCRResultData?> getOCRResultByCacheKey(String cacheKey) async {
    final query = select(ocrResults)..where((tbl) => tbl.cacheKey.equals(cacheKey));
    return await query.getSingleOrNull();
  }

  /// 根據 ID 取得 OCR 結果
  Future<OCRResultData?> getOCRResultById(String id, {bool includeImage = false}) async {
    final query = select(ocrResults)..where((tbl) => tbl.id.equals(id));
    
    if (!includeImage) {
      // 不包含圖片資料以節省記憶體
      query.addColumns([
        ocrResults.id,
        ocrResults.rawText,
        ocrResults.detectedTexts,
        ocrResults.confidence,
        ocrResults.imageWidth,
        ocrResults.imageHeight,
        ocrResults.processingTimeMs,
        ocrResults.ocrEngine,
        ocrResults.cacheKey,
        ocrResults.processedAt,
        ocrResults.createdAt,
        ocrResults.isValidCache,
      ]);
    }
    
    return await query.getSingleOrNull();
  }

  /// 取得 OCR 歷史記錄
  Future<List<OCRResultData>> getOCRHistory({
    int limit = 50,
    bool includeImages = false,
  }) async {
    final query = select(ocrResults)
      ..orderBy([(tbl) => OrderingTerm.desc(tbl.processedAt)])
      ..limit(limit);
    
    if (!includeImages) {
      // 不包含圖片資料以節省記憶體和查詢時間
      query.addColumns([
        ocrResults.id,
        ocrResults.rawText,
        ocrResults.detectedTexts,
        ocrResults.confidence,
        ocrResults.imageWidth,
        ocrResults.imageHeight,
        ocrResults.processingTimeMs,
        ocrResults.ocrEngine,
        ocrResults.cacheKey,
        ocrResults.processedAt,
        ocrResults.createdAt,
        ocrResults.isValidCache,
      ]);
    }
    
    return await query.get();
  }

  /// 刪除 OCR 結果
  Future<bool> deleteOCRResult(String id) async {
    final affectedRows = await (delete(ocrResults)..where((tbl) => tbl.id.equals(id))).go();
    return affectedRows > 0;
  }

  /// 清理舊的 OCR 結果
  Future<int> cleanupOldResults({int daysOld = 30}) async {
    final cutoffDate = DateTime.now().subtract(Duration(days: daysOld));
    return await (delete(ocrResults)
      ..where((tbl) => tbl.processedAt.isSmallerThanValue(cutoffDate)))
      .go();
  }

  /// 更新快取有效性
  Future<void> updateCacheValidity(String cacheKey, bool isValid) async {
    await (update(ocrResults)..where((tbl) => tbl.cacheKey.equals(cacheKey)))
        .write(OCRResultsCompanion(isValidCache: Value(isValid)));
  }

  /// 取得統計資訊
  Future<OCRStatisticData?> getStatistics() async {
    final query = select(ocrStatistics)..limit(1);
    return await query.getSingleOrNull();
  }

  /// 更新統計資訊
  Future<void> updateStatistics(OCRStatisticData stats) async {
    await into(ocrStatistics).insertOnConflictUpdate(stats);
  }

  /// 計算即時統計資訊
  Future<Map<String, dynamic>> calculateRealTimeStatistics() async {
    final totalCountQuery = ocrResults.count();
    final avgConfidenceQuery = ocrResults.confidence.avg();
    final avgProcessingTimeQuery = ocrResults.processingTimeMs.avg();
    
    final results = await Future.wait([
      customSelect(
        'SELECT COUNT(*) as total_count, AVG(confidence) as avg_confidence, '
        'AVG(processing_time_ms) as avg_processing_time FROM ocr_results',
        readsFrom: {ocrResults},
      ).getSingle(),
      customSelect(
        'SELECT ocr_engine, COUNT(*) as count FROM ocr_results '
        'WHERE ocr_engine IS NOT NULL GROUP BY ocr_engine',
        readsFrom: {ocrResults},
      ).get(),
    ]);
    
    final generalStats = results[0];
    final engineStats = results[1] as List<QueryRow>;
    
    final engineUsage = <String, int>{};
    for (final row in engineStats) {
      engineUsage[row.read<String>('ocr_engine')] = row.read<int>('count');
    }
    
    return {
      'totalProcessed': generalStats.read<int>('total_count'),
      'averageConfidence': generalStats.read<double?>('avg_confidence') ?? 0.0,
      'averageProcessingTimeMs': generalStats.read<double?>('avg_processing_time') ?? 0.0,
      'engineUsage': engineUsage,
    };
  }
}

/// Card Data Access Object
@DriftAccessor(tables: [BusinessCards])
class CardDao extends DatabaseAccessor<AppDatabase> with _$CardDaoMixin {
  CardDao(AppDatabase db) : super(db);

  /// 插入新名片
  Future<void> insertCard(BusinessCardModel card) {
    return into(businessCards).insert(
      BusinessCardsCompanion.insert(
        id: card.id,
        name: card.name,
        namePhonetic: Value(card.namePhonetic),
        jobTitle: Value(card.jobTitle),
        company: Value(card.company),
        department: Value(card.department),
        email: Value(card.email),
        phone: Value(card.phone),
        mobile: Value(card.mobile),
        address: Value(card.address),
        website: Value(card.website),
        notes: Value(card.notes),
        photoPath: Value(card.photoPath),
        createdAt: card.createdAt,
        updatedAt: card.updatedAt,
      ),
    );
  }

  /// 更新名片
  Future<void> updateCard(BusinessCardModel card) {
    return (update(businessCards)..where((tbl) => tbl.id.equals(card.id))).write(
      BusinessCardsCompanion(
        name: Value(card.name),
        namePhonetic: Value(card.namePhonetic),
        jobTitle: Value(card.jobTitle),
        company: Value(card.company),
        department: Value(card.department),
        email: Value(card.email),
        phone: Value(card.phone),
        mobile: Value(card.mobile),
        address: Value(card.address),
        website: Value(card.website),
        notes: Value(card.notes),
        photoPath: Value(card.photoPath),
        updatedAt: Value(card.updatedAt),
      ),
    );
  }

  /// 刪除名片
  Future<bool> deleteCard(String id) async {
    final affectedRows = await (delete(businessCards)..where((tbl) => tbl.id.equals(id))).go();
    return affectedRows > 0;
  }

  /// 根據 ID 獲取名片
  Future<BusinessCardModel?> getCardById(String id) async {
    final query = select(businessCards)..where((tbl) => tbl.id.equals(id));
    final result = await query.getSingleOrNull();
    
    if (result == null) return null;
    
    return _mapToModel(result);
  }

  /// 獲取所有名片（按建立時間倒序）
  Future<List<BusinessCardModel>> getAllCards() async {
    final query = select(businessCards)..orderBy([(tbl) => OrderingTerm.desc(tbl.createdAt)]);
    final results = await query.get();
    
    return results.map(_mapToModel).toList();
  }

  /// 搜尋名片（模糊搜尋姓名、公司、email）
  Future<List<BusinessCardModel>> searchCards(String searchTerm) async {
    final query = select(businessCards)
      ..where((tbl) => 
          tbl.name.upper().contains(searchTerm.toUpperCase()) |
          tbl.company.upper().contains(searchTerm.toUpperCase()) |
          tbl.email.upper().contains(searchTerm.toUpperCase())
      )
      ..orderBy([(tbl) => OrderingTerm.desc(tbl.createdAt)]);
      
    final results = await query.get();
    return results.map(_mapToModel).toList();
  }

  /// 根據公司獲取名片
  Future<List<BusinessCardModel>> getCardsByCompany(String company) async {
    final query = select(businessCards)
      ..where((tbl) => tbl.company.equals(company))
      ..orderBy([(tbl) => OrderingTerm.desc(tbl.createdAt)]);
      
    final results = await query.get();
    return results.map(_mapToModel).toList();
  }

  /// 將資料庫結果轉換為 BusinessCardModel
  BusinessCardModel _mapToModel(BusinessCardData data) {
    return BusinessCardModel(
      id: data.id,
      name: data.name,
      namePhonetic: data.namePhonetic,
      jobTitle: data.jobTitle,
      company: data.company,
      department: data.department,
      email: data.email,
      phone: data.phone,
      mobile: data.mobile,
      address: data.address,
      website: data.website,
      notes: data.notes,
      photoPath: data.photoPath,
      createdAt: data.createdAt,
      updatedAt: data.updatedAt,
    );
  }
}

/// 應用程式主資料庫
@DriftDatabase(tables: [BusinessCards, OCRResults, OCRStatistics], daos: [CardDao, OCRDao])
class AppDatabase extends _$AppDatabase {
  /// 建構函式 - 接受自訂的 QueryExecutor
  AppDatabase(QueryExecutor e) : super(e);

  /// 預設建構函式 - 使用應用程式文件目錄
  AppDatabase.defaultInstance() : super(_openConnection());

  @override
  int get schemaVersion => 2;

  @override
  MigrationStrategy get migration => MigrationStrategy(
    onCreate: (Migrator m) {
      return m.createAll();
    },
    onUpgrade: (Migrator m, int from, int to) async {
      // 版本 1 -> 2: 新增 OCR 相關表格
      if (from < 2) {
        await m.createTable(ocrResults);
        await m.createTable(ocrStatistics);
        
        // 插入預設統計資料
        await into(ocrStatistics).insert(OCRStatisticsCompanion.insert(
          id: 'default',
          lastUpdated: DateTime.now(),
        ));
      }
    },
    beforeOpen: (details) async {
      // 啟用外鍵約束
      await customStatement('PRAGMA foreign_keys = ON');
      
      // 設定 WAL 模式以提升併發效能
      await customStatement('PRAGMA journal_mode = WAL');
      
      // 設定同步模式
      await customStatement('PRAGMA synchronous = NORMAL');
    },
  );
}

/// 開啟資料庫連接
QueryExecutor _openConnection() {
  return LazyDatabase(() async {
    // 獲取應用程式文件目錄
    final dbFolder = await getApplicationDocumentsDirectory();
    final file = File(p.join(dbFolder.path, 'business_cards.db'));
    
    return NativeDatabase.createInBackground(file);
  });
}