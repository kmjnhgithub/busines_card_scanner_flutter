import 'package:busines_card_scanner_flutter/core/services/validation_service.dart';
import 'package:busines_card_scanner_flutter/domain/entities/business_card.dart';
import 'package:busines_card_scanner_flutter/domain/usecases/card/create_card_manually_usecase.dart';
import 'package:busines_card_scanner_flutter/domain/usecases/card/delete_card_usecase.dart';
import 'package:busines_card_scanner_flutter/domain/usecases/card/get_cards_usecase.dart';
import 'package:busines_card_scanner_flutter/presentation/features/card_detail/view_models/card_detail_state.dart';
import 'package:busines_card_scanner_flutter/presentation/presenters/toast_presenter.dart';
import 'package:flutter/foundation.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import 'package:uuid/uuid.dart';

part 'card_detail_view_model.g.dart';

/// 名片詳情 ViewModel
/// 
/// 負責管理名片詳情頁面的狀態和業務邏輯
/// 支援四種模式：檢視、編輯、新增、手動建立
@riverpod
class CardDetailViewModel extends _$CardDetailViewModel {
  ValidationService get _validationService => ref.read(validationServiceProvider);
  GetCardsUseCase get _getCardsUseCase => ref.read(getCardsUseCaseProvider);
  CreateCardManuallyUseCase get _createCardUseCase => ref.read(createCardManuallyUseCaseProvider);
  DeleteCardUseCase get _deleteCardUseCase => ref.read(deleteCardUseCaseProvider);
  ToastPresenter get _toastPresenter => ref.read(toastPresenterProvider);

  @override
  CardDetailState build() {
    return const CardDetailState.initial();
  }

  /// 初始化檢視模式
  Future<void> initializeViewing(String cardId) async {
    state = const CardDetailState.loading();

    try {
      final cards = await _getCardsUseCase.execute();
      final card = cards.where((c) => c.id == cardId).firstOrNull;
      
      if (card == null) {
        state = const CardDetailState.error(message: '找不到指定的名片');
        return;
      }

      state = CardDetailState.viewing(card: card);
    } on Exception catch (e) {
      state = CardDetailState.error(message: '載入名片失敗：${e.toString()}');
    }
  }

  /// 初始化編輯模式
  Future<void> initializeEditing(String cardId) async {
    state = const CardDetailState.loading();

    try {
      final cards = await _getCardsUseCase.execute();
      final card = cards.where((c) => c.id == cardId).firstOrNull;
      
      if (card == null) {
        state = const CardDetailState.error(message: '找不到指定的名片');
        return;
      }

      state = CardDetailState.editing(
        originalCard: card,
        currentCard: card,
        hasChanges: false,
      );
    } on Exception catch (e) {
      state = CardDetailState.error(message: '載入名片失敗：${e.toString()}');
    }
  }

  /// 初始化新增模式（來自 OCR）
  void initializeCreating(CardDetailParams params) {
    if (params.ocrParsedCard == null) {
      state = const CardDetailState.error(message: '缺少 OCR 解析資料');
      return;
    }

    state = CardDetailState.creating(
      parsedCard: params.ocrParsedCard!,
      confidence: params.confidence,
      fromAIParsing: params.fromAIParsing,
    );
  }

  /// 初始化手動建立模式
  void initializeManual() {
    final emptyCard = BusinessCard(
      id: const Uuid().v4(),
      name: '',
      createdAt: DateTime.now(),
      updatedAt: DateTime.now(),
    );

    state = CardDetailState.manual(emptyCard: emptyCard);
  }

  /// 切換到編輯模式（從檢視模式）
  void switchToEditMode() {
    final currentState = state;
    if (currentState is _Viewing) {
      state = CardDetailState.editing(
        originalCard: currentState.card,
        currentCard: currentState.card,
        hasChanges: false,
      );
    }
  }

  /// 切換回檢視模式（從編輯模式）
  void switchToViewMode() {
    final currentState = state;
    currentState.when(
      initial: () {},
      loading: () {},
      error: (message) {},
      viewing: (card) {},
      editing: (originalCard, currentCard, hasChanges, validationErrors) {
        if (hasChanges) {
          // 如果有未保存的變更，需要確認
          _showDiscardChangesDialog();
          return;
        }
        state = CardDetailState.viewing(card: originalCard);
      },
      creating: (parsedCard, confidence, fromAIParsing, validationErrors) {},
      manual: (emptyCard, validationErrors) {},
    );
  }

  /// 更新名片欄位
  void updateCard(BusinessCard updatedCard) {
    final currentState = state;
    final validationResult = _validateCard(updatedCard);
    
    currentState.when(
      initial: () {},
      loading: () {},
      error: (message) {},
      viewing: (card) {},
      editing: (originalCard, currentCard, hasChanges, validationErrors) {
        final hasChanges = updatedCard != originalCard;
        state = CardDetailState.editing(
          originalCard: originalCard,
          currentCard: updatedCard,
          hasChanges: hasChanges,
          validationErrors: validationResult.errors,
        );
      },
      creating: (parsedCard, confidence, fromAIParsing, validationErrors) {
        state = CardDetailState.creating(
          parsedCard: updatedCard,
          confidence: confidence,
          fromAIParsing: fromAIParsing,
          validationErrors: validationResult.errors,
        );
      },
      manual: (emptyCard, validationErrors) {
        state = CardDetailState.manual(
          emptyCard: updatedCard,
          validationErrors: validationResult.errors,
        );
      },
    );
  }

  /// 儲存名片
  Future<bool> saveCard() async {
    final currentState = state;
    BusinessCard? cardToSave;
    
    // 確定要儲存的名片資料
    if (currentState is _Editing) {
      cardToSave = currentState.currentCard;
    } else if (currentState is _Creating) {
      cardToSave = currentState.parsedCard;
    } else if (currentState is _Manual) {
      cardToSave = currentState.emptyCard;
    }

    if (cardToSave == null) {
      _toastPresenter.showError('沒有可儲存的名片資料');
      return false;
    }

    // 驗證資料
    final validationResult = _validateCard(cardToSave);
    if (!validationResult.isValid) {
      _toastPresenter.showError('請修正表單錯誤後再儲存');
      return false;
    }

    // 更新狀態為儲存中
    state = state.copyWith(isSaving: true, error: null);

    try {
      await _createCardUseCase.execute(cardToSave);
      
      _toastPresenter.showSuccess('名片已儲存');
      state = state.copyWith(isSaving: false, hasChanges: false);
      return true;
      
    } on Exception catch (e) {
      state = state.copyWith(
        isSaving: false,
        error: '儲存失敗：${e.toString()}',
      );
      _toastPresenter.showError('儲存失敗：${e.toString()}');
      return false;
    }
  }

  /// 刪除名片
  Future<bool> deleteCard() async {
    final currentState = state;
    String? cardId;
    
    if (currentState is _Viewing) {
      cardId = currentState.card.id;
    } else if (currentState is _Editing) {
      cardId = currentState.originalCard.id;
    }

    if (cardId == null) {
      _toastPresenter.showError('無法刪除名片');
      return false;
    }

    state = state.copyWith(isLoading: true, error: null);

    try {
      await _deleteCardUseCase.execute(cardId);
      
      _toastPresenter.showSuccess('名片已刪除');
      return true;
      
    } on Exception catch (e) {
      state = state.copyWith(
        isLoading: false,
        error: '刪除失敗：${e.toString()}',
      );
      _toastPresenter.showError('刪除失敗：${e.toString()}');
      return false;
    }
  }

  /// 重置狀態
  void resetState() {
    state = const CardDetailState.initial();
  }

  /// 清除錯誤
  void clearError() {
    state = state.copyWith(error: null);
  }

  /// 驗證名片資料
  ValidationResult _validateCard(BusinessCard card) {
    final errors = <String, String>{};

    // 姓名必填
    if (card.name.trim().isEmpty) {
      errors['name'] = '姓名不能為空';
    }

    // Email 格式驗證
    if (card.email != null && card.email!.isNotEmpty) {
      final emailValidation = _validationService.validateEmail(card.email!);
      emailValidation.fold(
        (failure) => errors['email'] = 'Email 格式不正確',
        (validEmail) => {},
      );
    }

    // 電話格式驗證
    if (card.phone != null && card.phone!.isNotEmpty) {
      final phoneValidation = _validationService.validatePhoneNumber(card.phone!);
      phoneValidation.fold(
        (failure) => errors['phone'] = '電話格式不正確',
        (validPhone) => {},
      );
    }

    return ValidationResult(
      isValid: errors.isEmpty,
      errors: errors,
    );
  }

  /// 顯示放棄變更對話框
  void _showDiscardChangesDialog() {
    // 這個方法會被 UI 層覆寫來顯示實際的對話框
    debugPrint('Should show discard changes dialog');
  }

  /// 確認放棄變更
  void discardChanges() {
    final currentState = state;
    if (currentState is _Editing) {
      state = CardDetailState.viewing(card: currentState.originalCard);
    }
  }

  /// 取得當前的名片資料（用於表單顯示）
  BusinessCard? get currentCard {
    final currentState = state;
    
    if (currentState is _Viewing) {
      return currentState.card;
    } else if (currentState is _Editing) {
      return currentState.currentCard;
    } else if (currentState is _Creating) {
      return currentState.parsedCard;
    } else if (currentState is _Manual) {
      return currentState.emptyCard;
    }
    
    return null;
  }

  /// 是否可以編輯
  bool get canEdit {
    final currentState = state;
    return currentState is _Editing || 
           currentState is _Creating || 
           currentState is _Manual;
  }

  /// 是否有變更
  bool get hasChanges {
    final currentState = state;
    
    if (currentState is _Editing) {
      return currentState.hasChanges;
    } else if (currentState is _Creating || currentState is _Manual) {
      // 新增模式下，只要有必填欄位就算有變更
      final card = currentCard;
      return card != null && card.name.trim().isNotEmpty;
    }
    
    return false;
  }
}